// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array array;
    field int len, cap;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength < 0) {
            do Sys.error(14);
        }
        let len = 0;
        let cap = maxLength;
        if (~(maxLength = 0)) {
            let array = Array.new(maxLength);
        }
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (~(cap = 0)) {
            do array.dispose();
        }
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if ((j < 0) | ~(j < len)) {
            do Sys.error(15);
        }
        return array[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if ((j < 0) | ~(j < len)) {
            do Sys.error(16);
        }
        let array[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (len = cap) {
            do Sys.error(17);
        }
        let array[len] = c;
        let len = len + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (len = 0) {
            do Sys.error(18);
        }
        let len = len - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, ret, c;
        var boolean flip;
        let i = 0;
        let ret = 0;
        let flip = false;

        if (array[0] = 45) {
            let flip = true;
            let i = 1;
        }

        while (i < len) {
            let c = array[i];
            if ((c < 48) | (c > 57)) {
                if (flip) {
                    return -ret;
                }
                return ret;
            }
            let ret = (ret * 10) + (c - 48);
            let i = i + 1;
        }
        if (flip) {
            return -ret;
        }
        return ret;
    }

    method void __setIntRec(int val) {
        var int div;
        if (val > 9) {
            let div = val / 10;
            do __setIntRec(div);
            let val = val - (div * 10);
        }
        if (len = cap) {
            do Sys.error(19);
        }
        do appendChar(48 + val);
        return;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let len = 0;
        if (val = 0) {
            if (0 = cap) {
                do Sys.error(19);
            }
            do appendChar(48);
            return;
        }
        if (val < 0) {
            if (0 = cap) {
                do Sys.error(19);
            }
            do appendChar(45);
            let val = -val;
        }
        do __setIntRec(val);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
