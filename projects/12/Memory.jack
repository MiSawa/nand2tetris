// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    // [size (including header), next segment, free space]
    static Array first_segment;

    /** Initializes the class. */
    function void init() {
        // 2048 to 16383
        let first_segment = 2048;
        let first_segment[0] = 16384 - 2048;
        let first_segment[1] = 0;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return address[0];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let address[0] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array segment;
        var int segment_size, next_segment, rest_size, prev_next_segment_addr;
        if (~(size > 0)) {
            do Sys.error(5);
        }
        let size = size + 1; // need header
        let prev_next_segment_addr = 0;
        let segment = first_segment;
        while (~(segment = 0)) {
            let segment_size = segment[0];
            if (segment_size > size) {
                if (segment_size > (size + 10)) {
                    // split the segment
                    let rest_size = segment_size - size;
                    let segment[0] = rest_size;
                    let next_segment = segment + rest_size;
                    let next_segment[0] = size;
                    return next_segment + 1;
                }
                let next_segment = segment[1];
                if (prev_next_segment_addr = 0) {
                    let first_segment = next_segment;
                } else {
                    let prev_next_segment_addr[0] = next_segment;
                }
                return segment + 1;
            }
            let prev_next_segment_addr = segment + 1;
            let segment = segment[1];
        }
        do Sys.error(6);
        return 0;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let o = o - 1;
        let o[1] = first_segment;
        let first_segment = o;
        return;
    }
}
