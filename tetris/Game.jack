class Game {
    field int width, height;

    field boolean exit;
    field Array board;
    field Point currentPos;
    field int currentRot;
    field Minos currentMinos;
    field int score;

    field Array allMinos;

    constructor Game new() {
        var int i, j;
        var Array tmp;
        let width = 12;
        let height = 25;
        let currentPos = Point.new(0, 0);
        let currentRot = 0;

        let board = Array.new(height + 4);
        let i = 0;
        while (i < (height + 4)) {
            let tmp = Array.new(width);
            if (i = 0) {
                let j = 0;
                while (j < width) {
                    let tmp[j] = true;
                    let j = j + 1;
                }
            }
            let tmp[0] = true;
            let tmp[width - 1] = true;
            let board[i] = tmp;
            let i = i + 1;
        }

        let allMinos = Array.new(7);
        let allMinos[0] = Minos.getI();
        let allMinos[1] = Minos.getT();
        let allMinos[2] = Minos.getO();
        let allMinos[3] = Minos.getZ();
        let allMinos[4] = Minos.getS();
        let allMinos[5] = Minos.getL();
        let allMinos[6] = Minos.getJ();
        return this;
    }

    method void dispose() {
        var int i;
        var Array tmp;
        var Minos minos;
        let i = 0;
        while (i < height) {
            let tmp = board[i];
            do tmp.dispose();
            let i = i + 1;
        }
        let i = 0;
        while (i < 7) {
            let minos = allMinos[i];
            do minos.dispose();
            let i = i + 1;
        }
        do allMinos.dispose();
        do currentPos.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method void draw() {
        var int i, j, x, y;
        var Array minosRotated;
        var Array row;
        var Point p;
        let i = 0;
        let x = 252;
        while (i < height) {
            let row = board[i];
            let j = 0;
            let y = 196;
            while (j < width) {
                if (row[j]) {
                    do Screen.setColor(true);
                } else {
                    do Screen.setColor(false);
                }
                do Screen.drawRectangle(y, x - 9, y + 9, x);
                let j = j + 1;
                let y = y + 10;
            }
            let i = i + 1;
            let x = x - 10;
        }

        let i = 0;
        let minosRotated = currentMinos.getRotation(currentRot);
        while (i < 4) {
            let p = minosRotated[i];
            let x = 252 - (10 * (currentPos[0] + p[0]));
            let y = 196 + (10 * (currentPos[1] + p[1]));
            do Screen.drawRectangle(y, x - 9, y + 9, x);
            let i = i + 1;
        }
        do Output.moveCursor(0, 0);
        do Output.printInt(score);
        return;
    }

    // return true iff succeed
    method boolean move(int dx, int dy) {
        var int i;
        var Array minos, row;
        var Point p;
        let minos = currentMinos.getRotation(currentRot);
        let i = 0;
        while (i < 4) {
            let p = minos[i];
            let row = board[currentPos[0] + p[0] + dx];
            if (row[currentPos[1] + p[1] + dy]) {
                return false;
            }
            let i = i + 1;
        }
        let currentPos[0] = currentPos[0] + dx;
        let currentPos[1] = currentPos[1] + dy;
        return true;
    }

    method boolean rotate(int dir) {
        let currentRot = currentRot + dir;
        if (~move(0, 0)) {
            let currentRot = currentRot - dir;
            return false;
        }
        return true;
    }

    method void spawnMinos() {
        var int rnd;
        let currentPos[0] = 20;
        let currentPos[1] = 5;
        let currentRot = 0;
        let rnd = Rand.next();
        let rnd = rnd - ((rnd / 7) * 7);
        let currentMinos = allMinos[rnd];
        return;
    }

    method void commitMinos() {
        var int i;
        var Array minos, row;
        var Point p;
        let minos = currentMinos.getRotation(currentRot);
        let i = 0;
        while (i < 4) {
            let p = minos[i];
            let row = board[currentPos[0] + p[0]];
            let row[currentPos[1] + p[1]] = true;
            let i = i + 1;
        }
        return;
    }

    method void eraseLines() {
        var int i, j, k;
        var boolean anyBlank;
        var Array row, a, b;
        let i = 1;
        while (i < height) {
            let anyBlank = false;
            let row = board[i];
            let j = 0;
            while (j < width) {
                let anyBlank = anyBlank | ~row[j];
                let j = j + 1;
            }
            if (~anyBlank) {
                let score = score + 1;
                let k = i;
                while (k < (height + 2)) {
                    let board[k] = board[k+1];
                    let k = k + 1;
                }
                let board[k] = row;
                let k = 1;
                while (k < (width - 1)) {
                    let row[k] = false;
                    let k = k + 1;
                }
            }
            let i = i + 1;
        }
        do draw();
        return;
    }

    method void tick() {
        if (move(-1, 0)) {
            return;
        }
        do commitMinos();
        do eraseLines();
        do spawnMinos();
        if (~move(0, 0)) {
            let exit = true;
        }
        return;
    }

    method void run() {
        var int framesPerTick;
        var int framesUntilTick;
        var char key, prevKey;
        do spawnMinos();
        do draw();
        let framesPerTick = 100;
        let framesUntilTick = framesPerTick;
        while (~exit) {
            let key = Keyboard.keyPressed();
            while ((key = prevKey) & (~exit) & (framesUntilTick > 0)) {
                do Sys.wait(2);
                let framesUntilTick = framesUntilTick - 1;
            }
            if (~(key = prevKey)) {
                if (key = 130) {
                    do move(0, -1);
                }
                if (key = 132) {
                    do move(0,  1);
                }
                if (key = 90) {
                    do rotate(-1);
                }
                if (key = 88) {
                    do rotate( 1);
                }
                if (key = 140) {
                    let exit = true;
                }
            }
            if (~(framesUntilTick > 0)) {
                do tick();
                let framesUntilTick = framesPerTick;
            }
            do draw();
            let prevKey = key;
        }
        if (exit) {
            do Output.moveCursor(10,27);
            do Output.printString("Game Over");
        }
        return;
    }
}
